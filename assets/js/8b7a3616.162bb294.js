"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[4408],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(a),c=r,g=u["".concat(s,".").concat(c)]||u[c]||p[c]||i;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8619:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_label:"mecsimcalc Library",sidebar_position:4},l="Mecsimcalc 0.0.2 documentation",o={unversionedId:"code/mecsimcalc-library",id:"code/mecsimcalc-library",title:"Mecsimcalc 0.0.2 documentation",description:"This library is designed to provide a set of functions for handling and converting various types of data, such as base64 encoded data, Pandas DataFrames, and Pillow images.",source:"@site/docs/code/mecsimcalc-library.md",sourceDirName:"code",slug:"/code/mecsimcalc-library",permalink:"/code/mecsimcalc-library",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"mecsimcalc Library",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/code/tools"},next:{title:"Overview",permalink:"/output/overview"}},s={},d=[{value:"General",id:"general",level:2},{value:"decode_file_data",id:"decode_file_data",level:3},{value:"Description:",id:"description",level:4},{value:"Arguments:",id:"arguments",level:4},{value:"Returns:",id:"returns",level:4},{value:"Tables/DataFrames",id:"tablesdataframes",level:2},{value:"file_data_to_dataframe",id:"file_data_to_dataframe",level:3},{value:"Description:",id:"description-1",level:4},{value:"Arguments:",id:"arguments-1",level:4},{value:"Raises:",id:"raises",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"input_to_dataframe",id:"input_to_dataframe",level:3},{value:"Description:",id:"description-2",level:4},{value:"Arguments:",id:"arguments-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"dataframe_to_output",id:"dataframe_to_output",level:3},{value:"Description:",id:"description-3",level:4},{value:"Arguments:",id:"arguments-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"Images",id:"images",level:2},{value:"print_img",id:"print_img",level:3},{value:"Description:",id:"description-4",level:4},{value:"Arguments:",id:"arguments-4",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"input_to_PIL",id:"input_to_pil",level:3},{value:"Description:",id:"description-5",level:4},{value:"Arguments:",id:"arguments-5",level:4},{value:"Returns:",id:"returns-5",level:4}],m={toc:d};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mecsimcalc-002-documentation"},"Mecsimcalc 0.0.2 documentation"),(0,r.kt)("p",null,"This library is designed to provide a set of functions for handling and converting various types of data, such as base64 encoded data, Pandas DataFrames, and Pillow images."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from PIL import Image\nimport base64\nimport io\nimport pandas as pd\n")),(0,r.kt)("h2",{id:"general"},"General"),(0,r.kt)("h3",{id:"decode_file_data"},"decode_file_data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def decode_file_data(encoded_data, metadata)\n")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"Converts a base64 encoded file data into a file object. (e.g. converts data from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"file = inputs['fileInput']"))," to a file object)"),(0,r.kt)("h4",{id:"arguments"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"encoded_data"))," (str): Base64 encoded file data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"metadata"))," (bool, optional): If True, returns a tuple of (fileData, metadata). Defaults to False")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"io.BytesIO")),": fileData"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"(io.BytesIO, str)")),": (fileData, metadata) if metadata is True")),(0,r.kt)("h2",{id:"tablesdataframes"},"Tables/DataFrames"),(0,r.kt)("h3",{id:"file_data_to_dataframe"},"file_data_to_dataframe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def file_data_to_dataframe(file_data):\n")),(0,r.kt)("h4",{id:"description-1"},"Description:"),(0,r.kt)("p",null,"Converts a file object into a pandas DataFrame"),(0,r.kt)("h4",{id:"arguments-1"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"file_data"))," (io.BytesIO): Decoded file data (e.g. from ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"decode_file_data")),")")),(0,r.kt)("h4",{id:"raises"},"Raises:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"pd.errors.ParserError")),": If the file data cannot be converted to a DataFrame (e.g. if the file is not an Excel or CSV file)")),(0,r.kt)("h4",{id:"returns-1"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"pd.DataFrame")),": The DataFrame created from the file data")),(0,r.kt)("h3",{id:"input_to_dataframe"},"input_to_dataframe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def input_to_dataframe(file):\n")),(0,r.kt)("h4",{id:"description-2"},"Description:"),(0,r.kt)("p",null,"Converts a base64 encoded file data into a pandas DataFrame. (e.g. converts data from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"file = inputs['fileInput']"))," to a DataFrame)"),(0,r.kt)("h4",{id:"arguments-2"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Base64 encoded file data")),(0,r.kt)("h4",{id:"returns-2"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"pd.DataFrame")),": The DataFrame created from the file data")),(0,r.kt)("h3",{id:"dataframe_to_output"},"dataframe_to_output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def dataframe_to_output(\n    df,\n    DownloadText = "Download File",\n    DownloadFileName = "myfile",\n):\n')),(0,r.kt)("h4",{id:"description-3"},"Description:"),(0,r.kt)("p",null,"Creates an HTML table and a download link for a given DataFrame"),(0,r.kt)("h4",{id:"arguments-3"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"df"))," (pd.DataFrame): The DataFrame to be converted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"DownloadText")),' (str, optional): The text to be displayed on the download link. Defaults to "Download File"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"DownloadFileName")),' (str, optional): The name of the file to be downloaded. Defaults to "myfile"')),(0,r.kt)("h4",{id:"returns-3"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Tuple[str, str]")),": (HTML table, download link)")),(0,r.kt)("h2",{id:"images"},"Images"),(0,r.kt)("h3",{id:"print_img"},"print_img"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def print_img(\n    img,\n    metadata,\n    WIDTH = 200,\n    HEIGHT = 200,\n    OriginalSize = False,\n    DownloadText = "Download Image",\n    ImageName= "myimg",\n):\n')),(0,r.kt)("h4",{id:"description-4"},"Description:"),(0,r.kt)("p",null,"Converts a pillow image into an HTML image and a download link"),(0,r.kt)("h4",{id:"arguments-4"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"img"))," (PIL.Image.Image): The pillow image to be converted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"metadata"))," (str): The metadata of the image"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"WIDTH"))," (int, optional): The width of the HTML image. Defaults to 200"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"HEIGHT"))," (int, optional): The height of the HTML image. Defaults to 200"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"OriginalSize"))," (bool, optional): If True, the HTML image will be displayed in its original size Defaults to False. (overrides WIDTH and HEIGHT)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"DownloadText")),' (str, optional): The text to be displayed on the download link. Defaults to "Download Image"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"ImageName")),' (str, optional): The name of the image file when downloaded. Defaults to "myimg"')),(0,r.kt)("h4",{id:"returns-4"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Tuple[str, str]")),": (HTML image, download link)")),(0,r.kt)("h3",{id:"input_to_pil"},"input_to_PIL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def input_to_PIL(file):\n")),(0,r.kt)("h4",{id:"description-5"},"Description:"),(0,r.kt)("p",null,"Converts a base64 encoded file data into a pillow image. (e.g. converts data from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"file = inputs['fileInput']"))," to a pillow image)"),(0,r.kt)("h4",{id:"arguments-5"},"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Base64 encoded file data")),(0,r.kt)("h4",{id:"returns-5"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Tuple[PIL.Image.Image, str]")),": (pillow image, metadata)")))}p.isMDXComponent=!0}}]);