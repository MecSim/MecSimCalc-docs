"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[6419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const l={sidebar_label:"Utility Functions",sidebar_position:100},o="Python Utility Functions",r={unversionedId:"utility",id:"utility",title:"Python Utility Functions",description:"The following provides a list of Python utility functions that appeared throughout these documentations and that the **developer** may find useful for the Code step.",source:"@site/docs/utility.md",sourceDirName:".",slug:"/utility",permalink:"/utility",draft:!1,tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_label:"Utility Functions",sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"Localhost",permalink:"/self-hosting-apps/localhost"}},s={},d=[{value:"Generating Graphs",id:"generating-graphs",level:2},{value:"Text Files",id:"text-files",level:2},{value:"Image Files",id:"image-files",level:2},{value:"Displaying Images",id:"displaying-images",level:2},{value:"Generating Tables",id:"generating-tables",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"python-utility-functions"},"Python Utility Functions"),(0,i.kt)("p",null,"The following provides a list of Python utility functions that appeared throughout these documentations and that the ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"developer"))," may find useful for the ",(0,i.kt)("strong",{parentName:"p"},"Code")," step."),(0,i.kt)("h2",{id:"generating-graphs"},"Generating Graphs"),(0,i.kt)("p",null,"This utility function can be used to convert a ",(0,i.kt)("inlineCode",{parentName:"p"},"matplotlib")," graph to an ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/tags/tag_img.asp"},(0,i.kt)("inlineCode",{parentName:"a"},"<img>"))," HTML tag that can be embedded in the output page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nimport numpy as np\nimport base64\nimport io\n\ndef plt_show(plt, width=500, dpi=100):\n    # Converts matplotlib plt to image data string\n    #   plt is the matplotlib pyplot or figure\n    #   width is the width of the graph image in pixels\n    #   dpi (dots per inch) is the resolution of the image\n    bytes = io.BytesIO()\n    plt.savefig(bytes, format=\'png\', dpi=dpi)  # Save as png image\n    if hasattr(plt, "close"):\n        plt.close()\n    bytes.seek(0)\n    base64_string = "data:image/png;base64," + \\\n        base64.b64encode(bytes.getvalue()).decode("utf-8")\n    return "<img src=\'" + base64_string + "\' width=\'" + str(width) + "\'>"\n\ndef main(inputs):\n    # Code to generate a plot using matplot lib (plt)\n    # The following line uses the plt_show function to create an embeddable image\n    img = plt_show(plt)\n    return {"Image": img}\n')),(0,i.kt)("h2",{id:"text-files"},"Text Files"),(0,i.kt)("p",null,"This utility function can be used to generate a text file to be embedded in the output page using the ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/tags/tag_a.asp"},(0,i.kt)("inlineCode",{parentName:"a"},"<a>"))," HTML tag, allowing the user to download it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import base64\n\ndef Text_File(string,filename):\n    # This function generates the required file_data string for download.\n    # You can call this function to generate a text file containing the "string" data\n    # filename provides the name of the file when the user attempts to download it.\n    newdata = base64.b64encode(string.encode()).decode()\n    extension = ".txt"\n    meta = "data:text/plain;base64,"\n    encoded_data = meta + newdata\n    return "<a href=\'" + encoded_data + "\' download=\'" + filename + extension + "\'>Download File</a>"\n\ndef main(inputs):\n    # code to generate the required string variable "t".\n    t = ...\n    File = Text_File(t, "MyFile")\n    return {"File":File}\n')),(0,i.kt)("h2",{id:"image-files"},"Image Files"),(0,i.kt)("p",null,"This utility function can be used to generate an image file to be embedded in the output page using the ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/tags/tag_a.asp"},(0,i.kt)("inlineCode",{parentName:"a"},"<a>"))," HTML tag, allowing the user to download it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def Image_File(data, extension, filename):\n    return "<a href=\'" + data + "\' download=\'" + filename + "." + extension + "\'>Download Image</a>"\n\ndef main(inputs):\n    # code to generate encoded image file (encoded_data) and image format (extension).\n    imagefile = Image_File(encoded_data,extension,"MyImage")\n    return {\n        # Download using <a> tags\n        "File": imagefile,\n    }\n')),(0,i.kt)("h2",{id:"displaying-images"},"Displaying Images"),(0,i.kt)("p",null,"This utility function can be used to generate an image file to be displayed in the output page using the ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/tags/tag_img.asp"},(0,i.kt)("inlineCode",{parentName:"a"},"<img>"))," HTML tag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def Image_Embed(data):\n    return "<img src=\'" + data + "\'>"\n\ndef main(inputs):\n    #code to generate encoded image file (encoded_data)\n    image = Image_Embed(encoded_data)\n    return {\n        # Display using <img> tag\n        "Image": image,\n    }\n')),(0,i.kt)("h2",{id:"generating-tables"},"Generating Tables"),(0,i.kt)("p",null,"This utility function generates a string using the ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/html/html_tables.asp"},(0,i.kt)("inlineCode",{parentName:"a"},"<table>"))," HTML tag that can be embedded in the output page to display a table. This utility routine works only with tables having more than one column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def build_html_table(columns, column_headers):\n    # <table> is the table\n    # <tr> is table row\n    # <th> is table header\n    # <td> is table data cell\n    # (1) Table opening table\n    html_table = "<table border=\'3\' cellpadding=\'5\' style=\'border-collapse:collapse;\'><tr>"\n    # (2) Add header row\n    rows = len(columns[0])\n    for h in column_headers:\n        html_table += "<th>" + h + "</th>"\n    html_table += "</tr>"\n    # (3) Add all data rows\n    for i in range(rows):\n        html_table += "<tr>"\n        for column in columns:\n            html_table += "<td>" + str(column[i]) + "</td>"\n        html_table += "</tr>"\n    # (4) Add the table closing tag\n    html_table += "</table>"\n    return html_table\n\ndef main(inputs):\n    # Code to generate the arrays col1, col2, col3, ...\n    columns = [col1,col2,col3,...]\n    column_headers = ["Title 1", "Title 2","Title 3",...]\n    table = build_html_table(columns,column_headers)\n    return {"Table":table }\n')))}u.isMDXComponent=!0}}]);