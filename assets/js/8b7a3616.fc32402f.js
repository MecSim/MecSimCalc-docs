"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[4408],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>g});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var d=n.createContext({}),m=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=m(t.components);return n.createElement(d.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=m(a),g=l,k=u["".concat(d,".").concat(g)]||u[g]||s[g]||r;return a?n.createElement(k,i(i({ref:e},p),{},{components:a})):n.createElement(k,i({ref:e},p))}));function g(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8619:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_label:"mecsimcalc Library",sidebar_position:4},i="Mecsimcalc 0.0.3 documentation",o={unversionedId:"code/mecsimcalc-library",id:"code/mecsimcalc-library",title:"Mecsimcalc 0.0.3 documentation",description:"This library is designed to provide a set of functions for handling and converting various types of data, such as base64 encoded data, Pandas DataFrames, and Pillow images.",source:"@site/docs/code/mecsimcalc-library.md",sourceDirName:"code",slug:"/code/mecsimcalc-library",permalink:"/code/mecsimcalc-library",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"mecsimcalc Library",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Tools",permalink:"/code/tools"},next:{title:"Overview",permalink:"/output/overview"}},d={},m=[{value:"General",id:"general",level:2},{value:"Description:",id:"description",level:4},{value:"Arguments:",id:"arguments",level:4},{value:"Returns:",id:"returns",level:4},{value:"Example:",id:"example",level:4},{value:"Tables/DataFrames",id:"tablesdataframes",level:2},{value:"Description:",id:"description-1",level:4},{value:"Arguments:",id:"arguments-1",level:4},{value:"Raises:",id:"raises",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"Example:",id:"example-1",level:4},{value:"Description:",id:"description-2",level:4},{value:"Arguments:",id:"arguments-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"Example:",id:"example-2",level:4},{value:"Description:",id:"description-3",level:4},{value:"Arguments:",id:"arguments-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"Example:",id:"example-3",level:4},{value:"Python Code:",id:"python-code",level:4},{value:"Output using Jinja2 Template:",id:"output-using-jinja2-template",level:4},{value:"Images",id:"images",level:2},{value:"Description:",id:"description-4",level:4},{value:"Arguments:",id:"arguments-4",level:4},{value:"Returns:",id:"returns-4",level:4},{value:"Description:",id:"description-5",level:4},{value:"Arguments:",id:"arguments-5",level:4},{value:"Returns:",id:"returns-5",level:4},{value:"Example:",id:"example-4",level:4},{value:"Python Code:",id:"python-code-1",level:4},{value:"Output using Jinja2 Template:",id:"output-using-jinja2-template-1",level:4}],p={toc:m};function s(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mecsimcalc-003-documentation"},"Mecsimcalc 0.0.3 documentation"),(0,l.kt)("p",null,"This library is designed to provide a set of functions for handling and converting various types of data, such as base64 encoded data, Pandas DataFrames, and Pillow images."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/MecSimCalc/MecSimCalc-utils"},"GitHub Repository")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pypi.org/project/mecsimcalc/"},"PyPi Page"))),(0,l.kt)("h2",{id:"general"},"General"),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"decode_file_data"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL8C1-L29C61",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def decode_file_data(encoded_data, metadata = False)\n")),(0,l.kt)("h4",{id:"description"},"Description:"),(0,l.kt)("p",null,"Converts a base64 encoded file into a file object and metadata"),(0,l.kt)("h4",{id:"arguments"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"encoded_data"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"Base64 encoded file data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"metadata"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"bool")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},"If True, function returns file and metadata (Defaults to False)")))),(0,l.kt)("h4",{id:"returns"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Condition"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"io.BytesIO"))),(0,l.kt)("td",{parentName:"tr",align:null},"The decoded file data"),(0,l.kt)("td",{parentName:"tr",align:null},"metadata is False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"(io.BytesIO, str)"))),(0,l.kt)("td",{parentName:"tr",align:null},"The decoded file and metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"metadata is True")))),(0,l.kt)("h4",{id:"example"},"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},">>> inputFile = inputs['file']\n>>> file, metadata = decode_file_data(inputFile, metadata = True)\n>>> print(metadata)\ndata:image/jpeg;base64,\n>>> print(file)\n<_io.BytesIO object at 0x0000000000000000>\n")),(0,l.kt)("h2",{id:"tablesdataframes"},"Tables/DataFrames"),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"file_data_to_dataframe"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL32C1-L52C14",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def file_data_to_dataframe(file_data):\n")),(0,l.kt)("h4",{id:"description-1"},"Description:"),(0,l.kt)("p",null,"Converts a file object into a pandas DataFrame"),(0,l.kt)("h4",{id:"arguments-1"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"file_data"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"io.BytesIO")),(0,l.kt)("td",{parentName:"tr",align:null},"Decoded file data (e.g. from ",(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"decode_file_data")),")")))),(0,l.kt)("h4",{id:"raises"},"Raises:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Exception"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"pd.errors.ParserError"))),(0,l.kt)("td",{parentName:"tr",align:null},"If the file data cannot be converted to a DataFrame (i.e. file is not an Excel or CSV file or is corrupted)")))),(0,l.kt)("h4",{id:"returns-1"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"pd.DataFrame"))),(0,l.kt)("td",{parentName:"tr",align:null},"DataFrame created from file data")))),(0,l.kt)("h4",{id:"example-1"},"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},">>> inputFile = inputs['file']\n>>> file, metadata = decode_file_data(inputFile, metadata = True)\n>>> df = file_data_to_dataframe(file)\n>>> print(df)\n   A  B  C\n")),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"input_to_dataframe"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL55C1-L67C44",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def input_to_dataframe(file):\n")),(0,l.kt)("h4",{id:"description-2"},"Description:"),(0,l.kt)("p",null,"Converts a base64 encoded file data into a pandas DataFrame"),(0,l.kt)("h4",{id:"arguments-2"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"file"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"Base64 encoded file data")))),(0,l.kt)("h4",{id:"returns-2"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"pd.DataFrame"))),(0,l.kt)("td",{parentName:"tr",align:null},"DataFrame created from file data")))),(0,l.kt)("h4",{id:"example-2"},"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},">>> inputFile = inputs['file']\n>>> df = input_to_dataframe(inputFile)\n>>> print(df)\n   A  B  C\n")),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"dataframe_to_output"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL70C1-L95C1",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def dataframe_to_output(\n    df,\n    DownloadText = "Download File",\n    DownloadFileName = "myfile",\n):\n')),(0,l.kt)("h4",{id:"description-3"},"Description:"),(0,l.kt)("p",null,"Creates an HTML table and a download link for a given DataFrame"),(0,l.kt)("h4",{id:"arguments-3"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"df"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"pd.DataFrame")),(0,l.kt)("td",{parentName:"tr",align:null},"DataFrame to be converted")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"DownloadText"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},'Text to be displayed as the download link (Defaults to "Download File")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"DownloadFileName"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},'Name of file when downloaded (Defaults to "myfile")')))),(0,l.kt)("h4",{id:"returns-3"},"Returns:"),(0,l.kt)("p",null,"| Return Type | Description |\n|",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Tuple[str, str]")),"| (HTML table, download link)|"),(0,l.kt)("h4",{id:"example-3"},"Example:"),(0,l.kt)("h4",{id:"python-code"},"Python Code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'>>> inputFile = inputs[\'file\']\n>>> df = input_to_dataframe(inputFile)\n>>> table, download = dataframe_to_output(df, DownloadFileName = "mytable", DownloadText = "Download Table")\n>>> return {\n        "table":table,\n        "download"download,\n    }\n')),(0,l.kt)("h4",{id:"output-using-jinja2-template"},"Output using Jinja2 Template:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# outputs.table is the HTML table\nDisplaying Table\n{{ outputs.table }}\n\n# outputs.download is the download link\nDownloading Table\n{{ outputs.download }}\n")),(0,l.kt)("h2",{id:"images"},"Images"),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"input_to_PIL"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL97C1-L113C25",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def input_to_PIL(file):\n")),(0,l.kt)("h4",{id:"description-4"},"Description:"),(0,l.kt)("p",null,"Converts a base64 encoded file data into a pillow image"),(0,l.kt)("h4",{id:"arguments-4"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"file"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"Base64 encoded file data")))),(0,l.kt)("h4",{id:"returns-4"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"Tuple[PIL.Image.Image, str]"))),(0,l.kt)("td",{parentName:"tr",align:null},"(pillow image, metadata)")))),(0,l.kt)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},(0,l.kt)("h3",{style:{margin:5,padding:0}},"print_img"),(0,l.kt)("a",{href:"https://github.com/MecSimCalc/MecSimCalc-utils/blob/main/mecsimcalc/MecSimCalc.py#LL115C1-L168C31",style:{fontSize:"larger",marginBottom:"2em",margin:5,padding:0}},(0,l.kt)("strong",null,"[Source]"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def print_img(\n    img,\n    metadata,\n    WIDTH = 200,\n    HEIGHT = 200,\n    OriginalSize = False,\n    DownloadText = "Download Image",\n    ImageName= "myimg",\n):\n')),(0,l.kt)("h4",{id:"description-5"},"Description:"),(0,l.kt)("p",null,"Converts a pillow image into an HTML image and a download link"),(0,l.kt)("h4",{id:"arguments-5"},"Arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"img"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"PIL.Image.Image")),(0,l.kt)("td",{parentName:"tr",align:null},"Pillow image")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"metadata"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"Image metadata")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"WIDTH"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"int")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},"Output width of the image in pixels (Defaults to 200)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"HEIGHT"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"int")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},"Output height of the image in pixels (Defaults to 200)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"OriginalSize"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"bool")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},"If True, the HTML image will be displayed in its original size (Defaults to False)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"DownloadText"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},'The text to be displayed on the download link (Defaults to "Download Image")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"ImageName"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"str")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},'The name of the image file when downloaded (Defaults to "myimg")')))),(0,l.kt)("h4",{id:"returns-5"},"Returns:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("inlineCode",{parentName:"strong"},"Tuple[str, str]"))),(0,l.kt)("td",{parentName:"tr",align:null},"(HTML image, download link)")))),(0,l.kt)("h4",{id:"example-4"},"Example:"),(0,l.kt)("h4",{id:"python-code-1"},"Python Code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'>>> inputFile = inputs[\'file\']\n>>> img, metadata = input_to_PIL(inputFile)\n>>> image, download = print_img(img, metadata, OriginalSize = True, DownloadText = "Download Image Here", ImageName = "myimage")\n>>> return {\n        "image":image,\n        "download":download,\n    }\n')),(0,l.kt)("h4",{id:"output-using-jinja2-template-1"},"Output using Jinja2 Template:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# outputs.image is the HTML image\nDisplaying Image\n{{ outputs.image }}\n\n# outputs.download is the download link\nDownloading Image\n{{ outputs.download }}\n")))}s.isMDXComponent=!0}}]);