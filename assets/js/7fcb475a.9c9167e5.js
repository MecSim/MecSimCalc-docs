"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[4297],{5050:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var i=n(5893),s=n(1151);const a={sidebar_label:"Generating Graphics",sidebar_position:4},o="Generating Graphics",r={id:"getting-started/graphics",title:"Generating Graphics",description:"The output step is built on the popular Jinja and Nunjucks templating engines, which allows for the embedding of Python variables and for the use of Python-like expressions (eg. for-loops, if-statements).",source:"@site/docs/getting-started/graphics.md",sourceDirName:"getting-started",slug:"/getting-started/graphics",permalink:"/getting-started/graphics",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Generating Graphics",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Example 1",permalink:"/getting-started/example-1"},next:{title:"Example 2",permalink:"/getting-started/example-2"}},l={},p=[];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"generating-graphics",children:"Generating Graphics"}),"\n",(0,i.jsxs)(t.p,{children:["The output step is built on the popular ",(0,i.jsx)(t.a,{href:"https://jinja.palletsprojects.com/en/3.0.x/templates/",children:"Jinja"})," and ",(0,i.jsx)(t.a,{href:"https://mozilla.github.io/nunjucks/templating.html",children:"Nunjucks"})," templating engines, which allows for the embedding of Python variables and for the use of Python-like expressions (eg. for-loops, if-statements)."]}),"\n",(0,i.jsxs)(t.p,{children:["If a ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"developer"})})," wishes to display graphics, such as ",(0,i.jsx)(t.a,{href:"https://matplotlib.org/",children:"matplotlib"})," plots, they can use a mecsimcalc function ",(0,i.jsx)(t.code,{children:"msc.print_plot"})," provided in the following snippet of code, which exports the matplotlib figure into an html image."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import matplotlib.pyplot as plt\nimport numpy as np\nimport mecsimcalc as msc\n\ndef main(inputs):\n    # Code to generate a plot using matplotlib (plt)\n\n    # The following line uses the msc.print_plot() function to create an HTML image\n    img = msc.print_plot(plt)\n    return {"Image": img}\n'})}),"\n",(0,i.jsx)(t.p,{children:"As an example, the following snippet of code creates and exports an image of the cos function between 0 and 2Pi."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import matplotlib.pyplot as plt\nimport numpy as np\nimport mecsimcalc as msc\n\ndef main(inputs):\n\n    # Code to generate a plot using matplotlib (plt)\n    x = np.arange(0,2*np.pi,0.1)\n    y = np.cos(x)\n    plt.plot(x,y,label="cos")\n    plt.xlabel("x")\n    plt.ylabel("y")\n\n    # The following line uses the plt_show function to create an embeddable image\n    img = msc.print_plot(plt)\n    return {"Image": img}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var i=n(7294);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);