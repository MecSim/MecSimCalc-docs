"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[6120],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var l=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,l,o=function(t,e){if(null==t)return{};var n,l,o={},r=Object.keys(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=l.createContext({}),s=function(t){var e=l.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=s(t.components);return l.createElement(i.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},c=l.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,i=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),c=s(n),d=o,h=c["".concat(i,".").concat(d)]||c[d]||m[d]||r;return n?l.createElement(h,a(a({ref:e},u),{},{components:n})):l.createElement(h,a({ref:e},u))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,a=new Array(r);a[0]=c;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=t,p.mdxType="string"==typeof t?t:o,a[1]=p;for(var s=2;s<r;s++)a[s]=n[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6329:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var l=n(7462),o=(n(7294),n(3905));const r={sidebar_label:"Plots",sidebar_position:2},a="Plots",p={unversionedId:"output/plots",id:"output/plots",title:"Plots",description:"MecSimCalc supports the two most popular plotting libraries:",source:"@site/docs/output/plots.md",sourceDirName:"output",slug:"/output/plots",permalink:"/output/plots",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Plots",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/output/overview"},next:{title:"Conditionals",permalink:"/output/conditionals"}},i={},s=[{value:"Matplotlib",id:"matplotlib",level:2},{value:"Code",id:"code",level:3},{value:"Output",id:"output",level:3},{value:"Plotly",id:"plotly",level:2},{value:"Code",id:"code-1",level:3},{value:"Output",id:"output-1",level:3}],u={toc:s};function m(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,l.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"plots"},"Plots"),(0,o.kt)("p",null,"MecSimCalc supports the two most popular plotting libraries:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Matplotlib"),(0,o.kt)("li",{parentName:"ol"},"Plotly")),(0,o.kt)("h2",{id:"matplotlib"},"Matplotlib"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.")),(0,o.kt)("p",null,"Visit ",(0,o.kt)("a",{parentName:"p",href:"https://matplotlib.org/"},"matplotlib.org")," for full documentation on how to use Matplotlib:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://matplotlib.org/stable/users/index.html"},"Users guide")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://matplotlib.org/stable/api/index.html"},"Reference")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://matplotlib.org/stable/tutorials/index.html"},"Tutorials"))),(0,o.kt)("p",null,"Once your Matplotlib figure is ready to be displayed, convert it to a HTML string with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<img>")," tag that can be embedded into the outputs step. As follows:"),(0,o.kt)("h3",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nimport numpy as np\nimport base64\nimport io\n\n\ndef plt_show(plt, width=500, dpi=100):\n    # Converts matplotlib plt to image data string\n    #   plt is the matplotlib pyplot or figure\n    #   width is the width of the graph image in pixels\n    #   dpi (dots per inch) is the resolution of the image\n    bytes = io.BytesIO()\n    plt.savefig(bytes, format=\'png\', dpi=dpi)  # Save as png image\n    if hasattr(plt, "close"):\n        plt.close()\n    bytes.seek(0)\n    base64_string = "data:image/png;base64," + \\\n        base64.b64encode(bytes.getvalue()).decode("utf-8")\n    return "<img src=\'" + base64_string + "\' width=\'" + str(width) + "\'>"\n\ndef main(inputs):\n    # Create matplotlib figure\n    x = np.arange(0, 2, 0.01)\n    y = 2*(np.cos(4*x))\n    plt.plot(x, y)\n\n    # Convert figure to html using plt_show()\n    plot_html = plt_show(plt)\n    return {"plot": plot_html}\n')),(0,o.kt)("h3",{id:"output"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"{{ outputs.plot }}\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/example-2"},"Example 2")," in the introduction section for a detailed example on using Matplotlib."),(0,o.kt)("h2",{id:"plotly"},"Plotly"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Plotly's Python graphing library makes interactive, publication-quality graphs.")),(0,o.kt)("p",null,"Visit ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/"},"plotly.com/python")," for full documentation on how to use Plotly:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://plotly.com/python-api-reference/"},"Reference")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://plotly.com/python/plotly-fundamentals/"},"Fundamentals"))),(0,o.kt)("p",null,"Once your Plotly figure is ready to be displayed, convert it to a HTML string that can be embedded into the outputs step. As follows:"),(0,o.kt)("h3",{id:"code-1"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import plotly.express as px\nimport pandas as pd\nimport numpy as np\n\n\ndef main(inputs):\n    # Create plotly figure\n    x = np.arange(0, 2, 0.01)\n    y = 2*(np.cos(4*x))\n    fig = px.line(x, y, title="Cosine")\n\n    # Convert figure to html using to_html()\n    plot_html = fig.to_html(include_plotlyjs=True, full_html=False)\n    return {"plot": plot_html}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},".to_html()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"include_plotlyjs")," must be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," for the plot to be displayed.")),(0,o.kt)("h3",{id:"output-1"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"{{ outputs.plot }}\n")))}m.isMDXComponent=!0}}]);