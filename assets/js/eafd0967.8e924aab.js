"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[113],{4582:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>r});var i=t(5893),a=t(1151);const o={sidebar_label:"Animated Plots",sidebar_position:3},s="Animated Plots",l={id:"output/animated-plots",title:"Animated Plots",description:"Animated plots are a great way to visualize data that changes over time. In this example, we will show you how to create an animated plot using the matplotlib library in Python.",source:"@site/docs/output/animated-plots.md",sourceDirName:"output",slug:"/output/animated-plots",permalink:"/output/animated-plots",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Animated Plots",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Plots",permalink:"/output/plots"},next:{title:"Conditionals",permalink:"/output/conditionals"}},c={},r=[{value:"Method 1: Using <code>animate_plot</code> function",id:"method-1-using-animate_plot-function",level:2},{value:"Output",id:"output",level:3},{value:"Output",id:"output-1",level:3},{value:"Method 2: Using <code>print_animation</code> function",id:"method-2-using-print_animation-function",level:2},{value:"Output",id:"output-2",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"animated-plots",children:"Animated Plots"})}),"\n",(0,i.jsxs)(e.p,{children:["Animated plots are a great way to visualize data that changes over time. In this example, we will show you how to create an animated plot using the ",(0,i.jsx)(e.code,{children:"matplotlib"})," library in Python."]}),"\n",(0,i.jsxs)(e.h2,{id:"method-1-using-animate_plot-function",children:["Method 1: Using ",(0,i.jsx)(e.code,{children:"animate_plot"})," function"]}),"\n",(0,i.jsxs)(e.p,{children:["To create an animation, all you need is your x and y values and the ",(0,i.jsx)(e.code,{children:"animate_plot"})," function from the ",(0,i.jsx)(e.code,{children:"MecSimCalc"})," library. The ",(0,i.jsx)(e.code,{children:"animate_plot"})," function takes in the x and y values, the duration of the animation in seconds, and the title of the plot"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import mecsimcalc as msc\nimport numpy as np\n\ndef main(inputs):\n  # Define x and y values\n  x = np.linspace(0, 2*np.pi, 100) # 100 points between 0 and 2\u03c0\n  y = np.sin(x)\n\n  # Create an animated plot\n  animation = msc.animate_plot(x, y, title='Sine Wave', show_axes=True)\n\n  return {'animation': animation}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"output",children:"Output"}),"\n",(0,i.jsx)(e.p,{children:"The plot below shows a sine wave being drawn. The animation will run for 3 seconds."}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"sine function gif",src:t(8257).Z+"",width:"640",height:"480"})})}),"\n",(0,i.jsxs)(e.p,{children:["There is a second style of animation that can be created using the ",(0,i.jsx)(e.code,{children:"animate_plot"})," function. This style of animation is called ",(0,i.jsx)(e.code,{children:"follow_tip"}),". The ",(0,i.jsx)(e.code,{children:"follow_tip"})," animation style will animate the plot by moving a tip along the curve. The tip will move from the beginning of the curve to the end of the curve over the duration of the animation."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import numpy as np\nimport mecsimcalc as msc\n\ndef main(inputs):\n    x = np.linspace(0, 2*np.pi, 100) # 100 points between 0 and 2\u03c0\n    y = np.sin(x)\n    animation_html = msc.animate_plot(x, y, duration=4, title="Sine Wave", show_axes=True, follow_tip=True, fps=24)\n    return {"animation": animation_html}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"output-1",children:"Output"}),"\n",(0,i.jsx)(e.p,{children:"The plot below shows a sine wave that changes over time. The animation will run for 4 seconds."}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"sine function gif",src:t(4650).Z+"",width:"640",height:"480"})})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"{{outputs.plot}}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"method-2-using-print_animation-function",children:["Method 2: Using ",(0,i.jsx)(e.code,{children:"print_animation"})," function"]}),"\n",(0,i.jsxs)(e.p,{children:["If you want to create an animated plot using the ",(0,i.jsx)(e.code,{children:"matplotlib"})," library directly, you can use the ",(0,i.jsx)(e.code,{children:"print_animation"})," function from the ",(0,i.jsx)(e.code,{children:"MecSimCalc"})," library. The ",(0,i.jsx)(e.code,{children:"print_animation"})," function takes in the FuncAnimation and returns the animation as an html string."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nimport numpy as np\nimport mecsimcalc as msc\n\ndef main(inputs):\n  fig, ax = plt.subplots()\n  x = np.linspace(0, 2*np.pi, 100)\n  y = np.sin(x)\n  line, = ax.plot(x, y)\n\n  def update(frame): # This function will be called for each frame\n    phase_shift = 2 * np.pi * (frame / 100)\n    line.set_ydata(np.sin(x + phase_shift))\n    return line,\n\n  ani = FuncAnimation(fig, update, frames = 100)\n  animation = msc.print_animation(ani)\n\n  return {'animation': animation}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"output-2",children:"Output"}),"\n",(0,i.jsx)(e.p,{children:"The plot below shows a sine wave that changes over time. The animation will run for 5 seconds."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"{{outputs.animation}}\n"})}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"sine function gif",src:t(5162).Z+"",width:"640",height:"480"})})})]})}function p(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},4650:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/animate_plot(follow_tip)-0a3ac549b1c0fdba7fc1a9e716497899.gif"},8257:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/animate_plot-2bf215e40afb31da10bfbd15a60c34f9.gif"},5162:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/print_animation-ac6718a22468972af7daad57a55fc578.gif"},1151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>s});var i=t(7294);const a={},o=i.createContext(a);function s(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);