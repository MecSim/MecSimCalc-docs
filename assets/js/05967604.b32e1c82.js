"use strict";(self.webpackChunkmec_sim_calc_docs=self.webpackChunkmec_sim_calc_docs||[]).push([[4715],{3049:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=t(5893),s=t(1151);const i={sidebar_label:"Example 1",sidebar_position:2},o="Example 1: GeoPandas",d={id:"maps/example-1",title:"Example 1: GeoPandas",description:"This example provides a quick overview on how to use GeoPandas to create a GeoDataFrame, and how to visualize the data as a Folium map and a Matplotlib plot.",source:"@site/docs/maps/example-1.md",sourceDirName:"maps",slug:"/maps/example-1",permalink:"/maps/example-1",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Example 1",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/maps/overview"},next:{title:"Example 2",permalink:"/maps/example-2"}},r={},l=[{value:"Step 1: Inputs",id:"step-1-inputs",level:2},{value:"Step 2.1: Code version 1",id:"step-21-code-version-1",level:2},{value:"Get the data",id:"get-the-data",level:3},{value:"Manipulate the data",id:"manipulate-the-data",level:3},{value:"Exporting the map",id:"exporting-the-map",level:3},{value:"Step 2.2: Code version 2",id:"step-22-code-version-2",level:2},{value:"Get the data",id:"get-the-data-1",level:3},{value:"Exporting the map",id:"exporting-the-map-1",level:3},{value:"Step 2.3: Full Code",id:"step-23-full-code",level:2},{value:"Step 3: Output",id:"step-3-output",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"example-1-geopandas",children:"Example 1: GeoPandas"}),"\n",(0,n.jsxs)(a.p,{children:["This example provides a quick overview on how to use ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/user_guide.html",children:"GeoPandas"})," to create a ",(0,n.jsx)(a.code,{children:"GeoDataFrame"}),", and how to visualize the data as a Folium map and a Matplotlib plot."]}),"\n",(0,n.jsx)("div",{style:{width:"100%",height:"600px",overflow:"hidden"},children:(0,n.jsx)("iframe",{src:"https://mecsimcalc.com/app/4620929/map_geospatial_data",width:"100%",height:"100%",title:"MecSimCalc",style:{position:"relative",left:"-45px",top:"-48px"},frameBorder:"0"})}),"\n",(0,n.jsxs)(a.p,{children:["To get started, go to ",(0,n.jsx)(a.a,{href:"https://mecsimcalc.com/create",children:"mecsimcalc.com/create"}),", click on ",(0,n.jsx)(a.strong,{children:"Maps"}),", and select ",(0,n.jsx)(a.strong,{children:"Mapping Geospatial data"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"step-1-inputs",children:"Step 1: Inputs"}),"\n",(0,n.jsxs)(a.p,{children:["For the inputs, create a ",(0,n.jsx)(a.strong,{children:"Single Select"})," with the following properties:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Name:"})," dataset"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Label:"})," Dataset to visualize"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.strong,{children:"Options:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"naturalearth_cities"}),"\n",(0,n.jsx)(a.li,{children:"naturalearth_lowres"}),"\n",(0,n.jsx)(a.li,{children:"nybb"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"step-21-code-version-1",children:"Step 2.1: Code version 1"}),"\n",(0,n.jsx)(a.p,{children:"This code will get data from a GeoPanda's dataset, perform a distance calculation on the data, and then visualize it on an interactive Folium map."}),"\n",(0,n.jsx)("div",{style:{textAlign:"center"},children:(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"img",src:t(7791).Z+"",width:"1002",height:"597"})})}),"\n",(0,n.jsx)(a.h3,{id:"get-the-data",children:"Get the data"}),"\n",(0,n.jsxs)(a.p,{children:["First, get the geospatial data to visualize. You can either read in a file, create a Panda's ",(0,n.jsx)(a.code,{children:"DataFrame"}),", or create a ",(0,n.jsx)(a.code,{children:"GeoDataFrame"}),". In this example, we will use the user input ",(0,n.jsx)(a.code,{children:"inputs['dataset']"})," to select a GeoPanda's and then read it in as a file."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"path_to_data = geopandas.datasets.get_path(inputs['dataset'])\ngdf = geopandas.read_file(path_to_data)\n"})}),"\n",(0,n.jsx)(a.h3,{id:"manipulate-the-data",children:"Manipulate the data"}),"\n",(0,n.jsxs)(a.p,{children:["Once the data is loaded, we can manipulate the data using a ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.html",children:(0,n.jsx)(a.code,{children:"GeoDataFrame"})}),". You can convert your data to a GeoDataFrame by passing it as the input to ",(0,n.jsx)(a.code,{children:"geopandas.GeoDataFrame(...)"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["In this example, we will create a new column called ",(0,n.jsx)(a.code,{children:"distance"})," that will calculate the distance from the first point to every other point in the dataset."]}),"\n",(0,n.jsxs)(a.p,{children:["In order to get a list of points, set a new column called ",(0,n.jsx)(a.code,{children:"centroid"})," equal to the centroid of all the geometries by using the GeoPandas ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.centroid.html",children:(0,n.jsx)(a.code,{children:".centroid"})})," property."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"gdf['centroid'] = gdf.centroid\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Next, get the first point from the centroid column in the 0th row using ",(0,n.jsx)(a.code,{children:".iloc[0]"}),". Notice that ",(0,n.jsx)(a.code,{children:"iloc"})," is a Pandas function because ",(0,n.jsx)(a.code,{children:"GeoDataFrame"})," is an extension of Panda's ",(0,n.jsx)(a.code,{children:"DataFrame"})," and therefore, any Pandas function can also be used on ",(0,n.jsx)(a.code,{children:"GeoDataFrame"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"first_point = gdf['centroid'].iloc[0]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Now that we have a column of centroid points and the first point, we can perform the calculations. GeoPandas provides many functions for ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/geoseries.html",children:"geospatial calculations"}),". We will use the ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.distance.html",children:(0,n.jsx)(a.code,{children:"distance()"})})," function to calculate the distance of each point to the ",(0,n.jsx)(a.code,{children:"first_point"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"gdf['distance'] = geopandas.GeoSeries(gdf['centroid']).distance(first_point)\n"})}),"\n",(0,n.jsx)(a.h3,{id:"exporting-the-map",children:"Exporting the map"}),"\n",(0,n.jsxs)(a.p,{children:["Finally, to export the ",(0,n.jsx)(a.code,{children:"GeoDataFrame"})," data as an interactive Folium map, use the ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.explore.html",children:(0,n.jsx)(a.code,{children:".explore()"})})," function and pass in ",(0,n.jsx)(a.code,{children:'"distance"'})," as an input, where ",(0,n.jsx)(a.code,{children:'"distance"'}),' is the name of the column that you want to "explore" on the map. Then use ',(0,n.jsx)(a.code,{children:"._repr_html_()"})," to convert the Folium map object into an HTML string that can be displayed on the webpage."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'m = gdf.explore("distance", legend=True)\ninteractive_map = m._repr_html_()\n'})}),"\n",(0,n.jsx)(a.h2,{id:"step-22-code-version-2",children:"Step 2.2: Code version 2"}),"\n",(0,n.jsxs)(a.p,{children:["This code will create data as a Panda's ",(0,n.jsx)(a.code,{children:"DataFrame"}),", convert it to a ",(0,n.jsx)(a.code,{children:"GeoDataFrame"}),", and then export it as a Matplotlib plot image."]}),"\n",(0,n.jsx)("div",{style:{textAlign:"center"},children:(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"img",src:t(2909).Z+"",width:"303",height:"397"})})}),"\n",(0,n.jsx)(a.h3,{id:"get-the-data-1",children:"Get the data"}),"\n",(0,n.jsxs)(a.p,{children:["First, create a Panda's ",(0,n.jsx)(a.code,{children:"DataFrame"})," with the data to visualize on the map."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"df = pd.DataFrame(\n    {'City': ['Buenos Aires', 'Brasilia', 'Santiago', 'Bogota', 'Caracas'],\n        'Country': ['Argentina', 'Brazil', 'Chile', 'Colombia', 'Venezuela'],\n        'Latitude': [-34.58, -15.78, -33.45, 4.60, 10.48],\n        'Longitude': [-58.66, -47.91, -70.66, -74.08, -66.86]})\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Convert the ",(0,n.jsx)(a.code,{children:"DataFrame"})," into a ",(0,n.jsx)(a.code,{children:"GeoDataFrame"})," by passing ",(0,n.jsx)(a.code,{children:"df"})," into ",(0,n.jsx)(a.code,{children:"geopandas.GeoDataFrame()"}),". Then convert the latitude and longitude columns into Points using ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.points_from_xy.html",children:(0,n.jsx)(a.code,{children:"geopandas.points_from_xy()"})}),", and set these Points as the ",(0,n.jsx)(a.code,{children:"geometry"})," column."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"gdf = geopandas.GeoDataFrame(\n    df, geometry=geopandas.points_from_xy(df.Longitude, df.Latitude)\n)\n"})}),"\n",(0,n.jsx)(a.p,{children:"Optionally, you can set a background for the plot. In this example, we will use a map of South America from the geopandas dataset as the background of the plot."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"path_to_data = geopandas.datasets.get_path(\"naturalearth_lowres\")\nworld = geopandas.read_file(path_to_data)\nax = world[world.continent == 'South America'].plot(color='white', edgecolor='black')\n"})}),"\n",(0,n.jsx)(a.h3,{id:"exporting-the-map-1",children:"Exporting the map"}),"\n",(0,n.jsxs)(a.p,{children:["Finally, to export the ",(0,n.jsx)(a.code,{children:"GeoDataFrame"})," as a Matplotlib plot, use the ",(0,n.jsx)(a.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.plot.html",children:(0,n.jsx)(a.code,{children:".plot()"})})," function, and then call ",(0,n.jsx)(a.code,{children:"plt_show()"})," to convert the Matplotlib figure into an image that can be displayed on the webpage."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'m = gdf.plot(ax=ax, color="red")\nstatic_map = plt_show(m.figure)\n'})}),"\n",(0,n.jsx)(a.h2,{id:"step-23-full-code",children:"Step 2.3: Full Code"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"import geopandas\nimport pandas as pd\nimport mecsimcalc as msc\n\n\ndef main(inputs):\n    # (i) Use a geopandas dataset\n    path_to_data = geopandas.datasets.get_path(inputs['dataset'])\n    gdf = geopandas.read_file(path_to_data)\n    # Manipulate geospatial data\n    gdf['centroid'] = gdf.centroid\n    first_point = gdf['centroid'].iloc[0]\n    # Calculate distance to first_point\n    gdf['distance'] = geopandas.GeoSeries(\n        gdf['centroid']).distance(first_point)\n    mean_of_distance = gdf['distance'].mean()\n    # (a) Export distance column as an interactive map\n    m = gdf.explore(\"distance\", legend=True)\n    interactive_map = m._repr_html_()\n\n    # (ii) Use a custom pandas dataset\n    df = pd.DataFrame(\n        {'City': ['Buenos Aires', 'Brasilia', 'Santiago', 'Bogota', 'Caracas'],\n         'Country': ['Argentina', 'Brazil', 'Chile', 'Colombia', 'Venezuela'],\n         'Latitude': [-34.58, -15.78, -33.45, 4.60, 10.48],\n         'Longitude': [-58.66, -47.91, -70.66, -74.08, -66.86]})\n    # Convert Pandas dataframe to GeoDataFrame\n    gdf = geopandas.GeoDataFrame(\n        # Use points_from_xy to convert to shapely.Point objects\n        df, geometry=geopandas.points_from_xy(df.Longitude, df.Latitude)\n    )\n    # Use a map of South America\n    path_to_data = geopandas.datasets.get_path(\"naturalearth_lowres\")\n    world = geopandas.read_file(path_to_data)\n    ax = world[world.continent == 'South America'].plot(color='white', edgecolor='black')\n    # (b) Export as a static image\n    m = gdf.plot(ax=ax, color=\"red\")\n    static_map = msc.print_plot(m.figure)\n\n    return {\"interactive_map\": interactive_map, \"static_map\": static_map, \"mean_of_distance\": mean_of_distance}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"step-3-output",children:"Step 3: Output"}),"\n",(0,n.jsxs)(a.p,{children:["For the output, display the two maps: ",(0,n.jsx)(a.code,{children:"outputs.static_map"})," and ",(0,n.jsx)(a.code,{children:"outputs.interactive_map"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"{{ outputs.static_map }}\n\n{{ outputs.interactive_map }}\n"})})]})}function p(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},7791:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/ex1_interactive_map-150b448e535bae94c93b197a311e5534.png"},2909:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/ex1_static_map-b7eac66153bf7841ec9ce8b2c8c5b3a8.png"},1151:(e,a,t)=>{t.d(a,{Z:()=>d,a:()=>o});var n=t(7294);const s={},i=n.createContext(s);function o(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);